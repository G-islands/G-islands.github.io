{"pages":[{"title":"about","text":"Nothing Here","link":"/about/index.html"}],"posts":[{"title":"2016 ccpc final B Wash","text":"题目大意题目链接\\有$l$件衣服，$n$台洗衣机$m$台烘干机。给出洗衣机和烘干机完成一件所需的时间，洗完的衣服可以无限堆放起来，问洗完且烘干所有衣服的最少时间。 solution对于洗衣服来说，贪心策略显然是选择最先可以洗完当前这件衣服的洗衣机。使用优先队列维护最快洗完之前的衣服且加上当前这件衣服的洗衣机。同时可以得到每件衣服洗完的时间。\\当烘干衣服时，策略是越晚洗完的衣服就要越快烘干才能缩短总时间。因此需要倒序处理每件衣服。维护方法和洗衣服类似。但是这里优先队列里维护的是连续烘干x件衣服所花的时间。因为是逆时间序处理，如果烘干机连续工作则$a[i]+node.t+node.w$表示当前这件作为这个烘干机的第一件，烘干后几个衣服所花的时间。如果烘干机不连续工作则这个无实际意义。因为对于一台特定的烘干机，他的最终完成时间完全取决于最终连续工作的时间$node.t$和开始连续工作的起始时间$a[i]$。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#include &lt;bits/stdc++.h&gt;using namespace std;#define for0(i, n) for (int i = 0; i &lt; n; i++)#define for1(i, n) for (int i = 1; i &lt;= n; i++)#define dec0(i, n) for (int i = n - 1; i &gt;= 0; i--)#define dec1(i, n) for (int i = n; i &gt;= 1; i--)#define mem(a, val) memset(a, val, sizeof(a))#define IO \\ ios::sync_with_stdio(0); \\ cin.tie(0); \\ cout.tie(0);#define ll long long#define db double#define ull unsigned long long#define pb push_back#define mp make_pair#define pii pair&lt;int, int&gt;#define pll pair&lt;ll, ll&gt;#define veci vector&lt;int&gt;#define vecl vector&lt;ll&gt;struct node { ll t, w; ll id; bool operator&lt;(const node&amp; tmp) const { return t + w &gt; tmp.t + tmp.w; }};ll a[1000010];int main() { IO; int t; cin &gt;&gt; t; for (int cas = 1; cas &lt;= t; cas++) { ll l, n, m; cin &gt;&gt; l &gt;&gt; n &gt;&gt; m; priority_queue&lt;node&gt; q1, q2; for1(i, n) { ll tmp; cin &gt;&gt; tmp; q1.push((node){0, tmp, 0}); } for1(i, m) { ll tmp; cin &gt;&gt; tmp; q2.push((node){0, tmp, i}); } for1(i, l) { node tmp = q1.top(); q1.pop(); a[i] = tmp.t + tmp.w; tmp.t += tmp.w; q1.push(tmp); } ll ans = 0; dec1(i, l) { node tmp = q2.top(); q2.pop(); ans = max(ans, tmp.t + tmp.w + a[i]); tmp.t += tmp.w; q2.push(tmp); } cout &lt;&lt; \"Case #\" &lt;&lt; cas &lt;&lt; \": \" &lt;&lt; ans &lt;&lt; endl; }}","link":"/post/2016-ccpc-final-B-Wash/"}],"tags":[{"name":"greedy","slug":"greedy","link":"/tags/greedy/"}],"categories":[{"name":"codeforces","slug":"codeforces","link":"/categories/codeforces/"}]}